#ifndef _TELEMETRY_H_
#define _TELEMETRY_H_

#include <stdlib.h>
#include <stdint.h>
#include <sys/time.h>
#include "log.hh"
#include "json.hh"


class Telemetry {
public: // [RDA]: Changed so experiments have access.
  // Constants
  static const uint64_t rtt_ewma_alpha_ = 70; // E(t) = (a)*RTT(t) + (1-a)*E(t-1)
  static const uint64_t rtt_ewma_norm_ = 100; // rtt_ewma_alpha demoninator

  // RTT Estimator
  static uint64_t rtt_estimate_; // usecs

  // Drop Counter
  static int64_t epoch_counter_;
  static const int drop_window_ = 10;
  static int last_drop_;
  static int n_drops_;
  static uint64_t *drop_times_;
  static uint64_t mtbf_; // usecs
  static int n_nodes_;
  static bool *drop_history_; // dropped recently

public:
  Telemetry() { }
  ~Telemetry() { }

  // RTT Estimator
  static inline uint64_t time() {
    struct timeval tv;
    gettimeofday(&tv, NULL);
    return UINT64_C(1000000)*tv.tv_sec + tv.tv_usec;
  }
  static void update_rtt_estimate(uint64_t new_estimate) {
    uint64_t rtt_estimate_before = rtt_estimate_;
    // Calc EWMA
    rtt_estimate_ = ((rtt_ewma_alpha_)*new_estimate)/rtt_ewma_norm_
                  + ((rtt_ewma_norm_-rtt_ewma_alpha_)*rtt_estimate_)/rtt_ewma_norm_;
    INFO() << "Updating RTT EWMA: [before] " << rtt_estimate_before
                             << " [after] " << rtt_estimate_
                             << " [with] " << new_estimate;
  }

  static void initialize_drops()
  {
    int i;
    uint64_t now;

    mtbf_ = 1000000; // reasonable default
    drop_times_ = (uint64_t *)malloc(drop_window_*sizeof(uint64_t));
    now = time();
    for(i=0;i<drop_window_;i++)
      drop_times_[i] = now - mtbf_;
    assert( n_nodes_>0 && "Telemetry must be informed of the node count" );
    drop_history_ = (bool *)malloc(n_nodes_*sizeof(bool));
    memset(drop_history_, 0, n_nodes_*sizeof(bool));
  }

  static void drop_event(uint64_t when, int who)
  {
    if( n_drops_==0 )
      initialize_drops();

    if( drop_history_[who] )
      return;
    drop_history_[who] = true;

    // Otherwise, it's the first time
    DATA() << "Detected node drop event";
    drop_times_[last_drop_] = when;
    ++n_drops_;
    if( n_drops_>=drop_window_ ) {
      int oldest = (last_drop_+1)%drop_window_;
      mtbf_ = (drop_times_[last_drop_] - drop_times_[oldest])/drop_window_;
    }
    last_drop_ = (last_drop_+1)%drop_window_;
  }

  static void live_event(int who)
  {
    if( n_drops_==0 )
      initialize_drops();

    drop_history_[who] = false;
  }

  static void master_drop_event(int epoch, uint64_t when, int who)
  {
    if( epoch > epoch_counter_ ) { // only want this is we haven't already done a master_drop event
      epoch_counter_ = epoch;
      drop_event(when, who);
    }
  }

};

#endif // _TELEMETRY_H_
