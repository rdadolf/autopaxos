#ifndef _TELEMETRY_H_
#define _TELEMETRY_H_

#include <stdlib.h>
#include <stdint.h>
#include <sys/time.h>
#include "log.hh"
#include "json.hh"


class Telemetry {
public: // [RDA]: Changed so experiments have access.
  // Constants
  static const uint64_t rtt_ewma_alpha_ = 80; // E(t) = (a)*RTT(t) + (1-a)*E(t-1)
  static const uint64_t rtt_ewma_norm_ = 100; // rtt_ewma_alpha demoninator

  // RTT Estimator
  uint64_t rtt_estimate_; // usecs
  // FIXME: make static

  // Drop Counter
  static int64_t epoch_counter_;
  static const int drop_window_ = 10;
  static int last_drop_;
  static int n_drops_;
  static uint64_t *drop_times_;
  static uint64_t mtbf_;
  // vector with elements of [time,is_master?]
  //uint64_t master_drop_mtbf_;
  //static Json true_drops_; // true drops are noted when the node is stopped using the stop message
  //static Json perceived_drops_;

public:
  Telemetry() {
    rtt_estimate_ = 0;
  }
  ~Telemetry() { }

  // RTT Estimator
  static inline uint64_t time() {
    struct timeval tv;
    gettimeofday(&tv, NULL);
    return UINT64_C(1000000)*tv.tv_sec + tv.tv_usec;
  }
  void update_rtt_estimate(uint64_t new_estimate) {
    uint64_t rtt_estimate_before = rtt_estimate_;
    // Calc EWMA
    rtt_estimate_ = ((rtt_ewma_alpha_)*new_estimate)/rtt_ewma_norm_
                  + ((rtt_ewma_norm_-rtt_ewma_alpha_)*rtt_estimate_)/rtt_ewma_norm_;
    INFO() << "Updating RTT EWMA: [before] " << rtt_estimate_before
                             << " [after] " << rtt_estimate_
                             << " [with] " << new_estimate;
  }

  static void drop_event(uint64_t when)
  {
    int i;
    DATA() << "Detected node drop event";
    if( n_drops_==0 ) {
      mtbf_ = 1000; // reasonable default
      drop_times_ = (uint64_t *)malloc(drop_window_*sizeof(uint64_t));
      memset(drop_times_, 0, drop_window_*sizeof(uint64_t));
    }
    drop_times_[last_drop_] = when;
    ++n_drops_;
    if( n_drops_>=drop_window_ ) {
      int oldest = (last_drop_+1)%drop_window_;
      mtbf_ = (drop_times_[last_drop_] - drop_times_[oldest])/drop_window_;
    }
    last_drop_ = (last_drop_+1)%drop_window_;
  }
  static void master_drop_event(int epoch, uint64_t when)
  {
    if( epoch > epoch_counter_ ) { // only want this is we haven't already done a master_drop event
      epoch_counter_ = epoch;
      drop_event(when);
    }
  }

};

#endif // _TELEMETRY_H_
